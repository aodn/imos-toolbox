#summary Overview of the deployment database

<wiki:toc />

= Deployment Database =

== Overview ==

The Deployment Database (DDB) is an MS-Access database which contains information about all deployments, instruments, personnel and sites for a specific location. 

== Schema ==

The DDB conforms to the following schema:

http://imos-toolbox.googlecode.com/svn/wiki/images/ddb_schema.png

== Interface ==

Within the toolbox, the DDB is accessed through a driver written in Java. The implementation differs depending on the platform:

 * Under Windows, Sun's [http://java.sun.com/javase/6/docs/technotes/guides/jdbc/bridge.html JDBC-ODBC bridge] driver is used:
{{{
              ------
              matlab
              ------
                 |
                 |
        --------------------
        org.imos.ddb.JDBCDDB
        --------------------
                 |
                 |
    ----------------------------
    sun.jdbc.odbc.JdbcOdbcDriver
    ----------------------------
                 |
                 |
                ----
                ODBC
                ----
                 |
                 |
             --------
             DDB file
             --------
}}}
 * Under Linux, libmdbsql, from [http://mdbtools.sourceforge.net/install/ mdbtools] is used, via a JNI wrapper, and a simplified native C wrapper:
{{{
              ------
              matlab
              ------
                 |
                 |
       ----------------------
       org.imos.ddb.MDBSQLDDB
       ----------------------
                 |
                 |
                ---
                JNI
                ---
                 |
                 |
         -----------------
         libmdbsql_wrapper
         -----------------
                 |
                 |
             ---------
             libmdbsql
             ---------
                 |
                 |
             --------
             DDB file
             --------
}}}

== Building ==

The build process is the same under both Windows and Linux. Under Windows, you need a JDK (>= 5.0) and ant. Under linux, you will also need gcc, make, glib (will usually be installed by default) and mdbtools. Under Ubuntu:
{{{
sudo apt-get install build-essential
sudo apt-get install mdbtools mdbtools-dev
}}}

To build, run the following from  the `Java` subdirectory:
{{{
ant clean
ant compile
ant test -Dddb=[imos-ddb]
}}}

where `[imos-ddb]` is the deployment database ODBC DSN (under Windows), or the deployment database filename (under Linux).

If the test succeeded, you should see a whole lot of output of some random entries from the DDB.

=== Building `libmdbsql_wrapper` ===

DDB access under Linux/Unix turned out to be a little more complex than I had hoped. 

ODBC under linux works nicely with [http://www.unixodbc.org/ unixODBC] and the ODBC driver included with [http://mdbtools.sourceforge.net/install/ mdbtools]. Because of this, I assumed that, using unixODBC and the mdbtools ODBC driver, I would be able to use the JDBC-ODBC bridge just like in Windows; however, there appears to be a number of problems when doing this. I got to the point where I was able to query metadata (e.g. table names) from Java, but attempts to do anything else (e.g. run a query) resulted in errors. After a bit of digging into the !JdbcOdbc and mdbtools ODBC source, I came across the following (in `mdbtools/src/odbc/odbc.c`):

{{{
SQLRETURN SQL_API SQLGetInfo(
    SQLHDBC            hdbc,
    SQLUSMALLINT       fInfoType,
    SQLPOINTER         rgbInfoValue,
    SQLSMALLINT        cbInfoValueMax,
    SQLSMALLINT FAR   *pcbInfoValue)
{
	TRACE("SQLGetInfo");
	return SQL_SUCCESS;
}
}}}

There are a lot more functions like this as well. So the problem is not caused by a 'bug' so to speak; rather, it is caused by the fact that the mdbtools ODBC driver is incomplete.

To get around this problem, I decided to write an interface, `libmdbsql_wrapper` which talks directly to the mdbtools API, and use JNI to call that interface, essentially providing direct access to the MS Access file. This seems to work quite nicely. To build the interface, run the following from the `Java/mdbsql` subdirectory. Ensure that your `JAVA_HOME` environment variable is valid on your system, otherwise it probably won't compile:
{{{
make clean
make
make install
}}}

=== Hacking `mdbtools` ===

I recently started having problems with `libmdb` and `libmdbsql` segfaulting. I spent a bit of time digging into the cause, and found that in `libmdb/index.c` there is some kind of indexing error occuring, causing parts of the program's memory to be corrupted (the segfault is incidental, caused by a pointer overwrite). My quick fix was to apply the following patch, which is probably not correct, but appears to make the libraries more stable:
{{{
--- mdbtools-orig/src/libmdb/index.c	2009-04-17 16:21:25.000000000 +1000
+++ mdbtools-local/src/libmdb/index.c	2009-04-20 16:07:13.000000000 +1000
@@ -119,21 +119,10 @@
 	mdb_read_alt_pg(mdb, entry->table_pg);
 	mdb_read_pg(mdb, index_start_pg);
 	cur_pos = table->index_start;
-	idx_num=0;
+
 	for (i=0;i<table->num_real_idxs;i++) {
 		if (IS_JET4(mdb)) cur_pos += 4;
-		do {
-			pidx = g_ptr_array_index (table->indices, idx_num++);
-		} while (pidx && pidx->index_type==2);
-
-		/* if there are more real indexes than index entries left after
-		   removing type 2's decrement real indexes and continue.  Happens
-		   on Northwind Orders table.
-		*/
-		if (!pidx) {
-			table->num_real_idxs--;
-			continue;
-		}
+		pidx = g_ptr_array_index (table->indices, i);
 
 		pidx->num_rows = mdb_get_int32(mdb->alt_pg_buf, 
 				fmt->tab_cols_start_offset +

}}}


== Configuration ==

You must tell matlab two things:

 * The location of the compiled java class files - add the directory path `[imos-toolbox-home]/Java/bin` to the file `toolbox/local/classpath.txt` in your matlab installation
 * The location of the compiled `libmdb_wrapper.so` file (only if using Linux) - add the directory path `[imos-toolbox-home]/Java/bin` to the file `toolbox/local/librarypath.txt` in your matlab installation.