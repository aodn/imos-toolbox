#summary Lists the automatic QC procedures that are currently available.
#labels Support,Featured

<wiki:toc/>


= Automatic quality control procedures =

The following automatic quality control procedures are available in the Toolbox version 2.1b. 

At the moment, the flag management policy is as follow :

-Every data point in the data set are checked by the QC procedures, procedure by procedure.<br>
-For each procedure, if a checked point was previously flagged "No QC performed" (which is initially the case before any test occurs) or "Good" and fails the test then it gains the corresponding fail flag.<br>
-If it was previously "No QC performed" and passes the test then it gains the corresponding pass flag.<br>
-If it was previously "Good" and passes the test then it keeps its "Good" flag.<br>
-If this checked point was previously flagged with a flag different from "No QC performed" or "Good" then it keeps its flag whatever the result of the test.<br>
<br>

So called "official IMOS standard procedures" and their suggested parameters are still under development/validation, any feedback or comments are welcome.

Other unofficial procedures are available for test purpose only. IMOS recommends that processed data files sent to eMII data centre should only be QC'd with official IMOS standard sets of procedures.

== Official IMOS standard set of procedures for moored CTD ==

This set of QC procedures has been specifically designed for checking physical variables such as temperature and salinity collected on moorings. These tests should always been performed for data sets collected on moorings. In order to have consistency over processed data files and to make results easier to interpret, we recommend to follow the suggested order of tests below :

 # morelloImpossibleLocationSetQC
 # morelloImpossibleDateQC
 # morelloInWaterQC
 # morelloOutWaterQC
 # morelloSpikeQC
 # morelloGradientQC
 # morelloStationarityQC
 # morelloRangeQC

The basis of most of these tests is described in [http://imos-toolbox.googlecode.com/svn/wiki/documents/QC/CTD/Morello_et_al_2011.pdf Morello et al. 2011 paper].


=== Impossible location test - morelloImpossibleLocationSetQC === 

morelloImpossibleLocationSetQC tests impossible Latitude and Longitude data values against nominal values for the current mooring site. Useful to detect typos in positions documented in the metadata/deployment database.

|| *Dimensions checked* || *Pass test flag* || *Fail test flag* ||
||Longitude, Latitude||1-Good data||3-Bad data that are potentially correctable||

Site name is retrieved from the deployment database in the field Site of the table !DeploymentData and then IMOS sites information and test parameters are read from IMOS\imosSites.txt. See example of such parameter file below :

{{{
% Definitions and descriptions of IMOS moorings/stations sites.
%
% These information are used in impossible location QC test. 
% distanceKmPlusMinusThreshold overrules other thresholds.
%
% Format:
%
%   name, longitude, latitude, longitudePlusMinusThreshold, latitudePlusMinusThreshold, distanceKmPlusMinusThreshold
%
NRSMAI,     148.2333,   -42.59667,  0.2,    0.25,   Nan
NRSNSI,     153.58,     -27.389,    0.2,    0.25,   Nan
NRSKAI,     136.4473,   -35.83217,  0.2,    0.25,   Nan
NRSESP,     121.85,     -33.93333,  0.2,    0.25,   Nan
NRSROT,     115.4167,   -32,        0.2,    0.25,   Nan
NRSNIN,     113.947,    -21.86652,  0.2,    0.25,   Nan
NRSDAR,     130.7681,   -12.4,      0.2,    0.25,   Nan
NRSYON,     147.6184,   -19.30847,  0.2,    0.25,   Nan
NRSPHB,     151.25,     -34.08333,  0.2,    0.25,   Nan

}}}

The impossible location test can be performed according to 2 variations.

 * distanceKmPlusMinusThreshold is Nan : 
Longitude and Latitude data are checked against nominal longitude and latitude values +/- longitudePlusMinusThreshold or latitudePlusMinusThreshold. 

In this case, positions are tested to be in a square centered on the nominal position and which width is 2*longitudePlusMinusThreshold and height is 2*latitudePlusMinusThreshold.

 * distanceKmPlusMinusThreshold is not Nan : 
Longitude and Latitude data are checked against their distance to the nominal position and distanceKmPlusMinusThreshold. 

In this case, positions are tested to be in a circle centered on the nominal position and which radius is distanceKmPlusMinusThreshold.


=== Impossible date test - morelloImpossibleDateQC === 

morelloImpossibleDateQC tests impossible Time values.

|| *Dimension checked* || *Pass test flag* || *Fail test flag* ||
||Time||1-Good data||3-Bad data that are potentially correctable||

Only the test `year > default_year_value` will be performed as the date information is stored in datenum format (decimal days since 01/01/0000) before being output. In addition not all the date information in input files are in ASCII format or expressed with day, month and year information, so we cannot do much more than assessing the year information is greater than a minimum value...

A morelloImpossibleDateQC.txt parameter file allows the user to define the minimum default_year_value. See example below :

{{{
dateMin = 01/01/2007

}}}


=== Before deployment & after retrieving date flagging - morelloInWaterQC & morelloOutWaterQC === 

morelloInWaterQC and morelloOutWaterQC flag Temperature and Salinity samples which were taken before an `in water` time and after `out water` time. Between these two time, data is deliberately left non QC'd.

|| *Variables checked* || *Pass test flag* || *Fail test flag* ||
||Temperature, Salinity||0-No QC performed||3-Bad data that are potentially correctable||

`in water` time can be one of these date information taken from fields of the table !DeploymentData in the deployment database, in this order of preference :

 # !TimeFirstGoodData : Time of first good data.
 # !TimeFirstInPos : Time instrument first in position.
 # !TimeFirstWet : Time instrument first in water.
 # !TimeSwitchOn : Time instrument is switched on.
 
`out water` time can be one of these date information taken from fields of the table !DeploymentData in the deployment database, in this order of preference :

 # !TimeLastGoodData : Time of last good data.
 # !TimeLastInPos : Time instrument last in position.
 # !TimeOnDeck : Time instrument on deck.
 # !TimeSwitchOff : Time instrument is switched off.

 
=== Spike test - morelloSpikeQC === 

morelloSpikeQC flags Temperature and Salinity spikes.

|| *Variables checked* || *Pass test flag* || *Fail test flag* ||
||Temperature, Salinity||1-Good data||4-Bad data||

The algorithm used here is the same used by the Australian National Mooring Facility Ocean Gliders ([http://www2.sese.uwa.edu.au/~hollings/anfog/index.php ANFOG]), namely a spike test which detects any data which value Vn fails the following test :

{{{
|Vn - (Vn+1 + Vn-1)/2| - |(Vn+1 - Vn-1)/2| > threshold
}}}

A morelloSpikeQC.txt parameter file allows the user to define the threshold value to use. See example below :

{{{
TEMP = 6
PSAL = 0.9

}}}

Threshold values proposed by various protocols are as follow :

 * Temperature
Threshold = 6 when pressure < 500 dbar<br>
Threshold = 2 when pressure >= 500 dbar

 * Salinity
Threshold = 0.9 when pressure < 500 dbar<br>
Threshold = 0.3 when pressure >= 500 dbar


=== Gradient test - morelloGradientQC === 

morelloGradientQC flags consecutive Temperature or Salinity values with gradient > threshold.

|| *Variables checked* || *Pass test flag* || *Fail test flag* ||
||Temperature, Salinity||1-Good data||4-Bad data||

Both current and previous points used to calculate gradient are flagged if the test fails.

Like for the spike test, a morelloGradientQC.txt parameter file allows the user to define the threshold value to use. See example below :

{{{
TEMP = 6
PSAL = 0.9

}}}

Again, threshold values proposed by various protocols are as follow :

 * Temperature
Threshold = 6 when pressure < 500 dbar<br>
Threshold = 2 when pressure >= 500 dbar

 * Salinity
Threshold = 0.9 when pressure < 500 dbar<br>
Threshold = 0.3 when pressure >= 500 dbar


=== Stationarity test - morelloStationarityQC === 

morelloStationarityQC flags consecutive Temperature or Salinity equal values in the given data set.

|| *Variables checked* || *Pass test flag* || *Fail test flag* ||
||Temperature, Salinity||1-Good data||4-Bad data||

The algorithm used is based on the stationarity test from IOC which detects any consecutive equal values when `number of consecutive points > T = 24*(60/delta_t)` with delta_t the sampling interval in minutes.


=== Climatology range test - morelloRangeQC === 

morelloRangeQC flags Temperature and Salinity values out of a climatology range.

|| *Variables checked* || *Pass test flag* || *Fail test flag* ||
||Temperature, Salinity||1-Good data||4-Bad data||

In order to perform this test, you need a climatology file for each of your mooring site. In your toolboxProperties.txt configuration file, make sure the directory where lie those climatology files is documented :

{{{
% default directory for climatology data
importManager.climDir = E:\Documents and Settings\ggalibert\My Documents\IMOS_toolbox\data_files_examples\CLIMATOLOGIES\
}}}

The cimatology test consists in a range test which detects any data which value doesn't fit in the range `[min max] = climRange(lon, lat, date, depth, param)` of a climatology. The range (mean +/- k*standard deviation) is location and time dependent and can be obtained using various parameters.

A morelloRangeQC.txt parameter file allows the user to define these parameters. See example below :

{{{
CLIM_STEP = monthly
DAILY_METHOD = trend_corr
MAX_TIME_SD = 6

}}}

CLIM_STEP option values can be 'monthly' or 'daily' to obtain monthly or daily range values from the climatology. 'monthly' should be appropriate in most cases.

DAILY_METHOD option values can be 'trend_corr' or 'loess' in case CLIM_STEP chosen option is 'daily'. 'trend_corr' should be appropriate in most cases.

Eventually, MAX_TIME_SD option is the number of standard deviation from the mean used to define the allowed min/max range. Default value is 6 but you might have to find the best value for each of your site.


== Official IMOS standard set of procedures for moored ADCP ==

This multi tests QC procedure has been specifically designed for checking horizontal and vertical components of the current collected from ADCPs on moorings. These tests should always been performed for data sets collected on moorings :

 # teledyneSetQC

 
=== Workhorse ADCP tests - teledyneSetQC === 

This quality procedure only works for Workhorse ADCPs manufactured by Teledyne RD Instruments.

|| *Variables checked* || *Pass test flag* || *Fail test flag* ||
||U, V and Z components of the current||1-Good data||4-Bad data||

It is based on a procedure implemented by the U.S. National Data Buoy Center, MI, and detailed in [http://imos-toolbox.googlecode.com/svn/wiki/documents/QC/ADCP/adcp_qc.pdf Crout et al. (2005)]. 

This same methodology has been applied for the Quality Control of the mooring data collected during the INSTANT (International Nusantara STratification ANd Transport program) deployments in the outflow straits - Lombok Strait and Timor Passage. In addition, the determinatination of the parameters used in this methodology has been described by Janet Sprintal (2007) in this [http://imos-toolbox.googlecode.com/svn/wiki/documents/QC/ADCP/INSTANTdataQC_v5.pdf document] (see Appendix 2). The result is as follow and specifies the default parameters values used in the QC procedure :

http://imos-toolbox.googlecode.com/svn/wiki/documents/QC/ADCP/QC_tests_RDI.png

The teledyneSetQC.txt parameter file allows the user to change these parameters (speeds are in m/s). By default, chosen parameters are those which have been determined by Janet Sprintal for the RDI Workhorse Quatermaster ADCP 300kHz. See example below :

{{{
err_vel   = 0.15
pgood     = 50
cmag      = 110
vvel      = 0.2
hvel      = 2.0
ea_thresh = 30
cutoff    = 2

}}}

The additional cutoff parameter is used to clean up the above surface bins. Any bin with its depth value <= cutoff*binSize gets a bad data flag.

== Other procedures ==

These QC procedures were historically included in previous versions of the toolbox and should only be used with full knowledge for test purpose. IMOS do not recommend these tests to be performed on data files that will be sent to eMII data centre.

=== Time gap detection - timeGapQC === 

timeGapQC flags consecutive samples which have a suspiciously large temporal difference.

|| *Variables checked* || *Pass test flag* || *Fail test flag* ||
||Any variable (not dimension) in the file||1-Good data||4-Bad data||

The timeGapQC function steps through the time dimension searching for gaps which are larger than the specified gapsize. Any detected gap will lead to the flagging of both points involved in the gap time.

The timeGapQC.txt parameter file contains this gap size value in decimal days. See example below :

{{{
gapsize = 0.25

}}}


=== Before deployment & after retrieving date flagging - inWaterQC & outWaterQC === 

inWaterQC and outWaterQC flag data samples which were taken before an `in water` time and after `out water` time. Between these two time, data is deliberately left non QC'd.

|| *Variables checked* || *Pass test flag* || *Fail test flag* ||
||Any variable (not dimension) in the file||0-No QC performed||3-Bad data that are potentially correctable||

`in water` time can be one of these date information taken from fields of the table !DeploymentData in the deployment database, in this order of preference :

 # !TimeFirstGoodData : Time of first good data.
 # !TimeFirstInPos : Time instrument first in position.
 # !TimeFirstWet : Time instrument first in water.
 # !TimeSwitchOn : Time instrument is switched on.
 
`out water` time can be one of these date information taken from fields of the table !DeploymentData in the deployment database, in this order of preference :

 # !TimeLastGoodData : Time of last good data.
 # !TimeLastInPos : Time instrument last in position.
 # !TimeOnDeck : Time instrument on deck.
 # !TimeSwitchOff : Time instrument is switched off.

 
=== Tukey spike detection - tukey53HDespikeQC === 

tukey53HDespikeQC detects spikes in the given data using the Tukey 53H method. 

|| *Variables checked* || *Pass test flag* || *Fail test flag* ||
||Any variable (not dimension) in the file||1-Good data||3-Bad data that are potentially correctable||

This method is described and tested against others in _[http://imos-toolbox.googlecode.com/svn/wiki/documents/QC/CTD/goring_nikora02.pdf Goring DG & Nikora VI 2002 'Despiking Acoustic Doppler Velocimeter Data', Journal of Hydraulic Engineering, January 2002, vol 128, issue 1, pp 117-126.]_ referencing _Otnes RK & Enochson Loren, 1978 'Applied Time Series Analysis Volume 1: Basic Techniques', pgs 96-97, Wiley._

The results say that this algorithm is highly influenced by the choice of the k parameter, so it isn't very reliable from a fully automated point of view.

A tukey53HDespikeQC.txt parameter file enables the user to tune the sensitivity of this spike detection test. See example below :

{{{
k = 1.5

}}}


=== RC filter spike detection - rcFilterDespikeQC === 

rcFilterDespikeQC detects spikes in the given data using the RC filter method. 

|| *Variables checked* || *Pass test flag* || *Fail test flag* ||
||Any variable (not dimension) in the file||1-Good data||3-Bad data that are potentially correctable||

This method is described and tested against others in _[http://imos-toolbox.googlecode.com/svn/wiki/documents/QC/CTD/goring_nikora02.pdf Goring DG & Nikora VI 2002 'Despiking Acoustic Doppler Velocimeter Data', Journal of Hydraulic Engineering, January 2002, vol 128, issue 1, pp 117-126.]_ referencing _Otnes RK & Enochson Loren, 1978 'Applied Time Series Analysis Volume 1: Basic Techniques', pgs 96-97, Wiley._

The results say that this algorithm has a tendency to detects far too many spikes and that the choice of the k parameter doesn't influence much on this behaviour.

A rcFilterDespikeQC.txt parameter file enables the user to tune the sensitivity of this spike detection test. See example below :

{{{
k = 3

}}}


=== Stationarity test - flatlineQC === 

flatlineQC flags flatline regions in the given data set.

|| *Variables checked* || *Pass test flag* || *Fail test flag* ||
||Any variable (not dimension) in the file||1-Good data||4-Bad data||

A flatline is defined as a consecutive set of samples which have the same value.

A flatlineQC.txt parameter file enables the user to specify the number of consecutive samples to be considered. See example below :

{{{
nsamples = 10

}}}


=== Basic range test - rangeQC === 

rangeQC flags data which is out of the variable's valid range.

|| *Variables checked* || *Pass test flag* || *Fail test flag* ||
||Any variable (not dimension) in the file||1-Good data||4-Bad data||

valid_min and valid_max values can be specified for any variable in the imosParameters.txt configuration file (two last columns). Any variable having no valid_min/max values or valid_min == valid_max will not be QC'd.

See below an example of imosParameters.txt file : 

{{{
%
% A list of all IMOS compliant parameter names, standard names, units of 
% measurement, fill values, and valid min/max values.This list has been copied 
% verbatim from the IMOS NetCDF User's manual version 1.2, and the IMOS NetCDF 
% File Naming Convention version 1.3. Entries are in the following format:
% 
%   parameter name, is cf parameter, standard/long name, units of measurement, data code, fillValue, validMin, validMax
%
% For parameters which are specified as a percentage, use the word 'percent' 
% in this file - this will be automatically converted into a '%' sign. This is 
% necessary because Matlab will interpret literal '%' signs as the beginining 
% of a comment.
%

ABSI,      0, acoustic_backscatter_intensity,                     Decibels,                                                          A, 999999.0, 0.0,     150.0
ADCP_CORR, 0, adcp_correlation_magnitude,                         .,                                                                 E, 999999.0, 0.0,     250.0
ADCP_GOOD, 0, adcp_percentage_good,                               percent,                                                           E, 999999.0, 0.0,     100.0
AIRT,      1, air_temperature,                                    Celsius,                                                           M, 999999.0, -50.0,   50.0
ATMP,      1, air_pressure,                                       Pascal,                                                            M, 999999.0, 90000.0, 110000.0
ATMS,      1, air_pressure_at_sea_level,                          Pascal,                                                            M, 999999.0, 90000.0, 110000.0
CDIR,      1, direction_of_sea_water_velocity,                    Degrees clockwise from true North in the direction of the current, V, 999999.0, 0.0,     360.0
CDOM,      0, concentration_of_coloured_dissolved_organic_matter, mg m-3,                                                            K, 999999.0,    ,     
}}}