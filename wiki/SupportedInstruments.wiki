#summary Lists the instruments that are currently supported.
#labels Support,Featured

<wiki:toc/>

= Supported Instruments =

This page lists the instruments which are supported by the toolbox, and the data formats required for each instrument. If you have data from an unsupported instrument, or from a supported instrument, but in an unsupported format, send me an [http://code.google.com/u/guillaume.galibert/ email], or leave a comment on this page, and I'll look into adding support for the instrument/format.

== Seabird SBE37/SBE39/SBE56 ==

The toolbox can read in data that has been downloaded from a SBE37 'Microcat' CTP sensor, a SBE39 temperature/pressure sensor or a SBE56 temperature logger.

The following variants of the SBE37 exist:
 * SBE37-IM
 * SBE37-IMP
 * SBE37-SM  (RS232)
 * SBE37-SM  (RS485)
 * SBE37-SMP (RS232)
 * SBE37-SMP (RS485)
 * SBE37-SI  (RS232)
 * SBE37-SI  (RS485)
 * SBE37-SIP (RS232)
 * SBE37-SIP (RS485)

The following variants of the SBE39 exist:
 * SBE39
 * SBE39-IM

The SBE output format is configurable, and there are slight differences in output formats between variants. Additionally, instruments which run an older firmware version use different commands for configuring the output format and downloading data. 

=== ASCII file format ===

The toolbox will parse sample data which is in the following ASCII format ('.asc' or '.cnv' files, order of fields doesn't matter):

{{{
  temperature[, conductivity][, pressure][, salinity][, fluorescence][, chlorophyll][, oxygen][, turbidity][, depth][, date][, time]
}}}
where

 * `temperature`: floating point, Degrees Celsius ITS-90
 * `conductivity`: floating point, S/m or mS/cm or uS/cm, optional (only on SBE37)
 * `pressure`:     floating point, decibars, optional (present on instruments with optional pressure sensor)
 * `salinity`: floating point, PSU, optional (may be present on SBE37 instruments with firmware >= 3.0)
 * `fluorescence`: integers, counts, optional (only on SBE37)
 * `chlorophyll`: floating point, mg/m3, optional (only on SBE37)
 * `oxygen`: floating point, mg/l or umol/kg, optional (only on SBE37)
 * `turbidity`: floating point, NTU, optional (only on SBE37)
 * `depth`: floating point, m, optional (only on SBE37)
 * `date`: dd mmm yyyy (e.g. 01 Jan 2008), optional
 * `time`: hh:mm:ss (e.g. 15:45:03), or elapsed seconds/minutes/hours since start/01-Jan-2000 or elapsed days since start of year, optional

All SBE37 variants can be configured to output this format. SBE39 variants provide data in this format only. On SBE37 instruments running firmware < 3.0, the sensor should be configured as follows:

{{{
  Format=1
}}}

For instruments running firmware >= 3.0:

{{{
OutputFormat=1
OutputDepth=N   (if sensor supports this command)
OutputSal=N     (if sensor supports this command - Y if you want salinity)
OutputSV=N
OutputDensity=N (if sensor supports this command)
OutputTime=Y    (if sensor supports this command)
}}}

The input file must also contain a header section which contains sensor metadata and calibration information (as obtained via the 'DS' and 'DC' commands) - this is the output format provided by the Windows Seaterm program. 

Output file formats from Seaterm v2 and firmware v1.4 are also supported for SBE37-SM.

=== HEX file format ===

In order to read in CTD data from [http://www.oceanobservatories.org/ OOI], SBE37-IM hex format is also supported. See SBE19+ [#.hex .hex] files below for details on this format.

== Seabird SBE19+ ==

The toolbox is able to read in both raw (.hex) and converted (.cnv) data files retrieved from a Seabird SBE19plus V2 CTD recorder. 

=== .hex ===

Raw .hex files can be retrieved directly from the instrument. These files consist of two sections:

 * *Raw header*: Header information as retrieved from the instrument. These lines are prefixed with `*`.
 * *Data*: Rows of ASCII-encoded hexadecimal data.

SBE19+ instruments can output raw data in either raw voltages/frequencies (`OutputFormat=0`) or in engineering units (`OutputFormat=1`); currently the toolbox can only read in raw voltages/frequencies.

=== .cnv === 

The Seabird SBE Data Processing program is able to generate .cnv files from raw .hex and .con files; the resulting .cnv file consists of three sections:

 * *Raw header*: Header information as retrieved from the instrument. These lines are prefixed with `*`.
 * *Processed header*: Header information generated by SBE Data Processing. These lines are prefixed with `#`.
 * *Data*: Rows of space separated data

The list of parameters contained in the .cnv file is configurable via the SBE Data Processing program. This function accepts the following parameters; the parameter must be provided in the listed unit of measurement:

  * Temperature (ITS 90, Degrees Celsius)
  * Conductivity (S/m)
  * Pressure (db)
  * Fluorescence (ug/L)
  * Oxygen (mg/L)
  * Salinity (PSU)

== WET Labs WQM ==

Although the toolbox is able to parse both .raw (instrument file) and .dat (processed by the Wetlabs Host software up to version 1.54) data file retrieved from a Wetlabs WQM CTD/ECO instrument, IMOS recommends the .dat should always be prefered when possible.

=== .dat ===

The '.dat' data file format, i.e. raw data which has been processed by the WQM Host software, is a tab-delimited format. WQM Host allows a wide range of fields to be included in the output file; the following are supported by the toolbox:

 * `WQM`             		(literal 'WQM')
 * `SN`              		(serial number - required)
 * `MMDDYY`          		(date - required)
 * `HHMMSS`          		(time - required)
 * `WQM-SN`		            (serial number - required)
 * `MM/DD/YY`	            (date - required)
 * `HH:MM:SS`	            (time - required)
 * `Cond(mmho)`      		(floating point conductivity, milliSiemens/metre)
 * `Temp(C)`         		(floating point temperature, Degrees Celsius)
 * `Pres(dbar)`      		(floating point pressure, Decibar)
 * `Sal(PSU)`        		(floating point salinity, Practical Salinity Unit)
 * `DO(mg/l)`        		(floating point dissolved oxygen, milligrams/Litre)
 * `DO(ml/l)`        		(floating point dissolved oxygen, millilitres/Litre)
 * `DO(mmol/m^3)`    		(floating point dissolved oxygen, millimole/metre^3)
 * `CHL(ug/l)`       		(floating point chlorophyll, micrograms/Litre)
 * `CHLa(ug/l)`		        (floating point chlorophyll, micrograms/Litre)
 * `F-Cal-CHL(ug/l)` 		(floating point factory coefficient chlorophyll, micrograms/Litre)
 * `U-Cal-CHL(ug/l)` 		(floating point user coefficient chlorophyll, micrograms/Litre)
 * `NTU`             		(floating point turbidity, NTU)
 * `NTU(NTU)`	            (floating point turbidity, NTU)
 * `PAR(umol_phtn/m2/s)`	(floating point photosynthetically active radiation, micromole of photon/m2/s)

Any other fields which are present in the input file will be ignored.

From WQM Host version 1.54, a header is included by default and is supported.

=== .raw ===

The '.raw' data file format consists in an ASCII file format with a metadata header and then semi-colon seperated data fields. Although this data file format is not documented by WET Labs, Charles James (South Australia) contributed to this parser in May 2010:

"Data sequence in raw file appears to be an attempt to wake up the instrument code 100 twice - I suspect this contains voltage info and other machine status data which I can't parse at this point. 
A burst of data with line code 4 with usually only CTP and O2 (other fields are zero);
A line of code 5 followed by code 100 then a burst of code 5 (more data now in other fields - still some zeros); 
A line of code 6 followed by code 100 then a burst of code 6 finish up with one code 100 (or sometimes two code 130s and then a 100 - maybe some lag between response after code 6 burst);"

== WET Labs ECO Triplet ==

The toolbox is able to parse a .raw data file retrieved from a Wetlabs ECO Triplet instrument. To do so the device file associated must have the same root filename as the .raw file but with the .dev extension.

The following device file format is supported to parse the .raw file and convert count values in engineering units :

{{{
ECO BB2FLWB-932
Created on: 3/2/12


Columns=9
N/U=1
N/U=2
N/U=3 
Lambda=4	1.218E-05	68	470	470
N/U=5   
Lambda=6    	7.754E-06	64	532	532
N/U=7   
cdom=8		0.0964		49   
N/U=9
}}}

In the .raw file, date and time formats as well as the number of columns are checked to cope with possible corruption. The following columns are supported by the toolbox:

 * `mm/dd/yy`          		(date - required)
 * `HH:MM:SS`          		(time - required)
 * `CHL`       				(floating point chlorophyll, micrograms/Litre)
 * `CDOM`		        	(floating point colored dissolved organic matter, ppb)
 * `NTU`             		(floating point turbidity, NTU)
 * `LAMBDA`    				(floating point volume scattering function of radiative flux, m-1.sr-1)
 
Any other column with significant data is going to be displayed "as is" by the toolbox but won't be output in the NetCDF file.

== !ReefNet Sensus Ultra logger ==

The toolbobx is able to read the data from a .csv file retrieved from a ReefNet Sensus Ultra logger. The supported file has no header and consists in a comma separated list of values with columns ordered as follow :

 # `dive id`					(integer)
 # `instrument serial number`	(string)
 # `unknown`					(string)
 # `start year`					(integer, time - required)
 # `start month`				(integer, time - required)
 # `start day`					(integer, time - required)
 # `start hour`					(integer, time - required)
 # `start minute`				(integer, time - required)
 # `start second`				(integer, time - required)
 # `ellapsed millisecond`		(integer, time - required)
 # `pressure`					(integer, absolute pressure, mbar)
 # `temperature`				(floating point, temperature, Kelvin)

== Aquatec Aqualogger 520 ==

The toolbox is able to parse raw data file retrieved from an Aquatec AQUAlogger 520. The
AQUAlogger 520 range of sensors provide logging capability for temperature and pressure. The following variants on the AQUAlogger 520 exist:
 * 520T:  temperature
 * 520P:  pressure
 * 520PT: pressure and temperature

The raw data file format for all loggers is identical; every line in a file, including sample data, is a key-value pair, separated by a comma. The following lines are examples:

{{{
VERSION,3.0
LOGGER TYPE,520PT Pressure & Temperature   
LOGGER,23-502,SYD100 T2 
DATA,23:00:01 24/06/2008,29412,16.310779,26345,1.025358,
DATA,23:00:02 24/06/2008,29411,16.312112,26346,1.025938,
}}}

If the logger was configured to use burst mode, the bursts are averaged.

== FSI NXIC CTD ==

The toolbox is able to import raw (.ctd) files retrieved from an NXIC CTD instrument, and parse the conductivity, temperature and depth data contained within. A specification for the .ctd file format is not available, so the toolbox relies upon [NXICBinaryFormat reverse engineering] efforts which may not be reliable. I am unsure as to whether data retrieved from instruments with a firmware version older than 4.42 can be imported into the toolbox.

Currently, the parser only provides conductivity, temperature and pressure data. I am in contact with FSI regarding access to the file format specification, and hope to provide auxillary sensor data in the near future.

== RBR ==

The toolbox is able to read in files retrieved from RBR DR-1050, XR-420 and XR-620 data loggers.

=== DR-1050 ===

The file format for DR-1050 loggers consists of a header section, and a list of pressure samples:

{{{
RBR DR-1050  6.30 014552 (Windows: 6.08 - Minimum required: 6.05)
Host time     09/11/30 14:00:13
Logger time   09/11/30 06:00:20
Logging start 09/07/15 08:00:00
Logging end   09/12/30 08:44:39
Sample period          00:10:00
Number of channels =  1, number of samples =  19860, mode: Logging Stopped by User
N01%9.4f
Calibration  1: 0.266759191581000
                978.815255026508000
                25.812309048604000
                22.012594717555000 deciBars
COMMENT: TWR500_500mtrs
Memory type: 6 AT45DB642D_LP

     Pres 
 521.5183 
 521.5165 
 ...
}}}

=== XR-420 & XR-620 ===

The toolbox is able to read in XR-420 data files generated using either RBR Windows v6.13 software or Ruskin v1.5.25 software with output in Engineering unit .txt format. For XR-620 data files, only those generated Ruskin v1.5.25 software with output in Engineering unit .txt format are supported.

Supported date format are either 'yy/mm/dd HH:MM:SS.FFF' or 'yyyy/mmm/dd HH:MM:SS.FFF'.

The file format consists of a header section, and a list of data samples of conductivity, temperature, pressure, fluorometry-chlorophyll, etc... when those variables are present.

Supported variable titles in file are as follow :

 * Cond
 * Temp
 * Pres
 * !FlCa
 * FlC
 * Turb
 * R_D_O2
 * Depth
 * Salin
 * !SpecCond
 * SoSUN
 * rdO2C

== YSI 6-Series == 

The toolbox is able to read in files retrieved from YSI 6-series data loggers (only the 6600 v2.4 has been tested). YSI have not published details of the binary file format, so the toolbox relies upon [YSIBinaryFormat reverse engineering efforts] which may not be completely reliable.

== Teledyne/RDI Workhorse ADCP ==

The toolbox is able to parse binary files retrieved from a Teledyne RD Workhorse ADCP instrument. The toolbox is only able to interpret raw files in the PD0 format (as it stands at December 2008). See the Workhorse H-ADCP Operation manual (available [http://imos-toolbox.googlecode.com/svn/wiki/documents/Instruments/RDI/Workhorse_Quartermaster_ADCP/WorkHorse_Commands_and_Output_Data_Format_Nov07.pdf here] or from the [http://www.rdinstruments.com/ Teledyne website]) for a description of the output format. As the toolbox works from raw binary files, pre-processing with RDI software is not required.

Unfortunately, reading in these binary files using Matlab is quite slow (about 30 seconds on test data of ~8000 ensembles/8MB). Re-implementing in C would provide much better performance.

A raw Workhorse data file consists of a set of 'ensembles'. Each ensemble contains data for one sample period. An ensemble is made up of a number of sections, the last five of which may or may not be present:

 * *Header*: Ensemble information (size/contents). Always present
 * *Fixed Leader Data*: ADCP configuration, serial number etc. Always present
 * *Variable Leader Data*: Time, temperature, salinity etc. Always present.
 * *Velocity*: Current velocities for each depth (a.k.a 'bins' or 'cells').
 * *Correlation Magnitude*: 'Magnitude of the normalized echo autocorrelation at the lag used for estimating the Doppler phase change'. 
 * *Echo Intensity*: Echo intensity data. 
 * *Percent Good*: Percentage of good data for each depth cell.
 * *Bottom Track Data*: Bottom track data. 

The toolbox reads in all of the ensembles and extracts the following:
 * Time
 * Temperature (at each time)
 * Pressure (at each time, if present)
 * Salinity (at each time, if present)
 * Northward velocity (at each time and depth)
 * Eastward velocity (at each time and depth)
 * Water speed (at each time and depth, derived from northward/eastward velocities)
 * Water direction (at each time and depth, derived from northward/eastward velocities)
 * Acoustic backscatter intensity (at each time and depth, a separate variable for each beam)
 * Pitch (at each time, if present)
 * Roll (at each time, if present)
 * Heading (at each time, if present)

The conversion from the ADCP velocity values currently assumes that the ADCP is using earth coordinates (see section 13.4 'Velocity Data Format' of the Workhorse H-ADCP Operation Manual).

== Nortek ADCP ==

The toolbox is able to parse raw binary data from the following Nortek instruments. The binary format for these instruments is specified in the Nortek System Integrator Manual, available for download [http://imos-toolbox.googlecode.com/svn/wiki/documents/Instruments/Nortek/system-integrator-manual.pdf here] or on [http://www.nortek-as.com/en/library/rep-room/application-development/system-integrator-manual Nortek website]:

 * Aquadopp Profiler (`.prf` files)
 * Continental (`.cpr` files)
 * AWAC (`.wpr` files)

For the Aquadopp Profiler and Continental, only the raw binary file is required. For reading wave data from an AWAC, you must use QuickWave or Storm Nortek softwares to generate the processed wave data files (`.whd`, `.wap`, `.wdr`, `.was` and `.wds`), as the AWAC binary file only contains raw wave data.

For the Aquadopp Profiler, Continental and AWAC, the following data is extracted:

 * Time
 * Northward velocity (at each time and depth)
 * Eastward velocity (at each time and depth)
 * Upward velocity (at each time and depth)
 * Acoustic backscatter (at each time and depth)
 * Battery voltage (at each time)
 * Temperature (at each time)
 * Relative pressure (at each time)
 * Pitch (at each time)
 * Roll (at each time)
 * Heading (at each time)

For the AWAC, if wave data is present, the following data is extracted. The AWAC wave data is loaded separately from the profile data, as it is on a different time scale:

 * Time
 * Frequency
 * Direction
 * Wave variance spectral density (at each time and frequency)
 * Wave direction spectral density (at each time and frequency)
 * Significant wave height (at each time)
 * Zero upcrossing period (at each time)
 * Wave from direction (at each time)
 * Wave directional spread (at each time)
 * Temperature (at each time)
 * Relative pressure (at each time)
 * Battery voltage (at each time)
 * Heading (at each time)
 * Pitch (at each time)
 * Roll (at each time)
 * Wave directional variance spectral density (at each time, frequency and direction)

 To read wave data, the parsers assumes :
 
 * the .whd, .wap, .was, .wdr and .wds exist and are in the same directory as the .wpr file.
 * the .wds file contains 90 rows per frequency.
 * the files adhere to the layouts as follow.
 
=== `.whd` file format ===

The toolbox currently assumes that the wave data `.whd` file columns adhere to the following format:

|| *Column* || *Field*               || *Unit*  ||
||1         ||Month                  ||1-12     ||
||2         ||Day                    ||1-31     ||
||3         ||Year                   ||         ||
||4         ||Hour                   ||0-23     ||
||5         ||Minute                 ||0-59     ||
||6         ||Second                 ||0-59     ||
||7         ||Burst counter          ||         ||
||8         ||No of wave data records||         ||
||9         ||Cell position          ||m        ||
||10        ||Battery voltage        ||V        ||
||11        ||Soundspeed             ||m/s      ||
||12        ||Heading                ||degrees  ||
||13        ||Pitch                  ||degrees  ||
||14        ||Roll                   ||degrees  ||
||15        ||Minimum pressure       ||dbar     ||
||16        ||Maximum pressure       ||dbar     ||
||17        ||Temperature            ||degrees C||
||18        ||!CellSize              ||m        ||
||19        ||Noise amplitude beam 1 ||counts   ||
||20        ||Noise amplitude beam 2 ||counts   ||
||21        ||Noise amplitude beam 3 ||counts   ||
||22        ||Noise amplitude beam 4 ||counts   ||
||23        ||AST window start       ||m        ||

=== `.wap` file format ===

The toolbox currently assumes that the wave data `.wap` file columns adhere to the following format:

|| *Column* || *Field*                       || *Unit* ||
||1         ||Month                          ||1-12    ||
||2         ||Day                            ||1-31    ||
||3         ||Year                           ||        ||
||4         ||Hour                           ||0-23    ||
||5         ||Minute                         ||0-59    ||
||6         ||Second                         ||0-59    ||
||7   		||Spectrum type                  ||(0-Pressure, 1-Velocity, 3-AST)||
||8   		||Significant height (Hm0)       ||(m)     ||
||9   		||Mean 1/3 height (H3)           ||(m)     ||
||10  		||Mean 1/10 height (H10)         ||(m)     ||
||11  		||Maximum height (Hmax)          ||(m)     ||
||12  		||Mean Height (Hmean)            ||(m)     ||
||13  		||Mean  period (Tm02)            ||(s)     ||
||14  		||Peak period (Tp)               ||(s)     ||
||15  		||Mean zerocrossing period (Tz)  ||(s)     ||
||16  		||Mean 1/3 Period (T3)           ||(s)     ||
||17  		||Mean 1/10 Period (T10)         ||(s)     ||
||18  		||Maximum Period (Tmax)          ||(s)     ||
||19  		||Peak direction (!DirTp)        ||(deg)   ||
||20  		||Directional spread (!SprTp)    ||(deg)   ||
||21  		||Mean direction (Mdir)          ||(deg)   ||
||22  		||Unidirectivity index 			 ||        ||
||23  		||Mean Pressure                  ||(dbar)  ||
||24  		||Mean AST distance              ||(m)     ||
||25  		||Mean AST distance (Ice)        ||(m)     ||
||26  		||No Detects 					 ||        ||
||27  		||Bad Detects					 ||        ||
||28  		||Number of Zero-Crossings 		 ||        ||
||29  		||Current speed (wave cell)      ||(m/s)   ||
||30  		||Current direction (wave cell)  ||(deg)   ||
||31        ||Error Code                     ||        ||

=== `.wdr` file format ===

The toolbox currently assumes that the wave data `.wdr` file columns adhere to the format listed below. The first line in the file gives frequency vector values for 1-n in Hz:

|| *Column* || *Field*            || *Unit* ||
||1         ||Directional Spectrum||Deg     ||
||2         ||Directional Spectrum||Deg     ||
||.         ||.                   ||.       ||
||n         ||Directional Spectrum||Deg     ||

=== `.was` file format ===

The toolbox currently assumes that the wave data `.was` file columns adhere to the format listed below. The first line in the file gives frequency vector values for 1-n in Hz:

|| *Column* || *Field*      || *Unit* ||
||1         ||Power Spectrum||m^2/Hz  ||
||2         ||Power Spectrum||m^2/Hz  ||
||.         ||.             ||.       ||
||n         ||Power Spectrum||m^2/Hz  ||

=== `.wds` file format ===

The toolbox currently assumes that the wave data `.wds` file adheres to the following format:

 * Each row is one frequency 0.02:0.01:[0.49 or 0.99] Hz
 * Each column is dicretized by 4 degrees 0:4:356 degrees:

|| *Burst* || *Size*             || *Unit*   ||
||1        ||n frequencies rows x 90 columns||m^2/Hz/deg (Normalized-Energy/deg)||
||2        ||n frequencies rows x 90 columns||m^2/Hz/deg (Normalized-Energy/deg)||
||.        ||.                   ||.         ||
||n        ||n frequencies rows x 90 columns||m^2/Hz/deg (Normalized-Energy/deg)||

== !EchoView ==

The toolbox includes a draft attempt to parse an !EchoView results comma separated variable (CSV) file. 

This function is almost a generic CSV Parser. The list of fields to define and the column names that populate those fields are defined in a text file `./Parser/echoview_config.txt` or the file specified by the property 'echoview.config' if defined in `toolboxProperties.txt`.

Limitations:
 * Text quoting is not properly supported (fields cannot contain ,)
 * Dates are only supported in the format yyyymmdd
 * Times are only supported in the format HH:MM:SS.ss
 * Timestamps are only supported as a date field followed by a time field yyyymmdd, HH:MM:SS.ss

== NIWA .DAT3 ==

The toolbox now includes a first attempt to parse NIWA's processed output ASCII file format .DAT3 as follow :

{{{
s0910ver1.DAT3                                 filename                        1
mcat 7285                                      instrument type and Serial #    2
 35 15.843 S 174 06.102 E                      lat lon (dd mm.mmm)             3
Veronica Channel, Bay of Islands               description of location         4
6 5.85                                         water depth,meter height - m    5
2009-10-06 15:50:01, 2010-04-20 13:20:01, +12  record start/finish time & zone 6
0   0  10   0                                  data gap interval d,h,m,s       7
severely fouled on recovery                                                    8
. Processed using pmd.m and read_mcat 14-Dec-2012 11:37:19                     9
Green nav pile in Veronica Channel                                            10
Quality control by BSG using qcmd_save.m 14/Dec/2012                          11
                                                                              12
                                                                              13
                                                                              14
                                                                              15
                                                                              16
                                                                              17
                                                                              18
time                  con    tem    pre    sal                                  
yyyy-mm-dd HH:MM:SS   s/m   degc   dbar    psu                                  
2009-10-06 15:50:01 4.020 15.176    0.9 32.386
2009-10-06 16:00:01 4.025 15.251    1.0 32.368
2009-10-06 16:10:01 4.026 15.264    1.1 32.367
...
}}}

Sampling interval and comments are read out of the header. Other information are redundant with what can be found in the .meta file (metadata) which will be used to populate the deployment database.

== NetCDF ==

NetCDF file format is read in the toolbox. However, when the file also exists in the original instrument format, is supported by the toolbox and referenced in a deployment database, then it is recommended to use the original instrument file along with the deployment database.