#summary Weekly SVN snapshots
#labels Support

<wiki:toc/>

= Weekly SVN Snapshots =

Weekly snapshots of the Toolbox codebase are available from the [http://code.google.com/p/imos-toolbox/downloads/list downloads] page. The snapshots are created every Monday at 13:00 (AEST). Two snapshot files are created:

 * *Source snapshot*: contains the source code straight from the SVN. Download this file if you have a licensed copy of Matlab.
 * *Standalone snapshot*: Contains a compiled version of the source code straight from the SVN. Download this file if you don't have access to Matlab.

Compilation of the standalone snapshot requires use of the Matlab Compiler, which is on a shared license. This means that if someone else is using the compiler when the snapshot script runs, the script will fail, and the standalone snapshot will not be uploaded. When this happens, I will attempt to compile a standalone snapshot as soon as possible.

== File format and contents ==

The source snapshots are zip files which contain the contents of the SVN `trunk` directory, minus the `Tests/sample_data` directory. 

The Java files are automatically compiled when the snapshot files are created, so there is no need to do any compilation. 

The Java code is compiled with the Sun Java Development Kit, version 1.6.0_25.

In the standalone snapshot, the matlab code is compiled with the Matlab Compiler, version 4.14 (R 2010b) since imos-toolbox versions strictly above 1.5.5. In order to run the standalone version of the Toolbox, you must first install the Matlab Component Runtime (MCR). You can download the proper MCR installer [ftp://emii2.its.utas.edu.au/pub/software/MCRInstaller here] :

 * imos-toolbox version 1.5 : MCRInstaller_7.10.exe
 * imos-toolbox version 1.5.5 : MCRInstaller_7.12.exe
 * imos-toolbox > version 1.5.5 : MCRInstaller_7.14.exe

The installer is a straightforward Windows installer; you only need to run it once. After you've downloaded the file, double click on it, and follow the instructions. During installation, you might be warned about requiring the .NET Framework - you may safely ignore this warning.

Once you have the MCR installed, you can run the Toolbox simply by double clicking on the 'imosToolbox.exe' file.

== Submission script ==

The snapshots are created on a Windows XP platform. Snapshot creation is triggered by a weekly cronjob, which executes the simple snapshot.bat script below :

{{{
python snapshot.py
pause
}}} 

The snapshot.py python script exports the SVN trunk, compiles the Java and then Matlab files, creates the snapshots, and finally calls another python script which uploads the snapshots to the project website. This [http://code.google.com/p/support/wiki/ScriptedUploads upload script] is conveniently provided by Google Code.

{{{
#!/usr/bin/python

import os
import sys
import time
import shutil
import ziputil
import gmail

# snapshot.py
# Exports the IMOS Toolbox from SVN and
#
#   - Creates an archive of the source 
#   - Runs Util/imosCompile.m to create a standalone executable archive
# 
# Both of these files are submitted back to the project as file downloads.
#
# svn, javac, ant and matlab must be on PATH
# JAVA_HOME must be set
#

lt = time.localtime()
at = time.asctime()

project = 'imos-toolbox'

def googleSubmit(archive, summary):

  username = 'my_google_code_id'
  password = 'my_google_code_svn_password'
  labels   = 'Type-Snapshot'

  print('\n--submitting %s to google' % archive)
  cmd = 'python googlecode_upload.py'
  cmd = ' %s -s "%s"' % (cmd,summary)
  cmd = ' %s -p %s'   % (cmd,project)
  cmd = ' %s -u %s'   % (cmd,username)
  cmd = ' %s -w %s'   % (cmd,password)
  cmd = ' %s -l "%s"' % (cmd,labels)
  cmd = ' %s %s'      % (cmd,archive)
  
  os.system(cmd)

url        = 'http://%s.googlecode.com/svn/trunk' % project
exportDir  = 'export'
srcArchive = '%04i-%02i-%02i_source_snapshot.zip' % (lt[0], lt[1], lt[2])
stdArchive = '%04i-%02i-%02i_standalone_snapshot.zip' % (lt[0], lt[1], lt[2])

srcSummary  = 'IMOS Toolbox SVN source snapshot from %s' % at 
stdSummary  = 'IMOS Toolbox SVN standalone snapshot from %s' % at 
compilerLog = 'C:\Documents and Settings\ggalibert\Desktop\IMOS_toolbox\snapshot\export\log.txt'

#
# export from SVN
#
print('\n--exporting tree from %s to %s' % (url, exportDir))
os.system('svn export %s %s' % (url, exportDir))

#
# remove Tests directory
#
print('\n--removing tests')
shutil.rmtree('%s/Tests' % exportDir)

#
# build DDB interface
#
print('\n--building DDB interface')
compiled = os.system('cd %s/Java && ant install' % exportDir)

if compiled is not 0:
  print('\n--DDB interface compilation failed - cleaning')
  os.system('cd %s/Java && ant clean' % exportDir)
  gmail.send(
    "guillaume.galibert@utas.edu.au",
    "[imos-toolbox] DDB interface compilation error",
    "Check the Java DDB interface code",
    None,
    "my_gmail_login",
    "my_gmail_password")

#
# create source snapshot
#
print('\n--creating source snapshot')
ziputil.zipdir(exportDir, srcArchive, False)

#
# create standalone snapshot
#
print('\n--creating standalone snapshot')
matlabOpts = '-wait -nosplash -nodesktop -logfile "%s"' % compilerLog
matlabCmd = "addpath('Util'); try, imosCompile(); catch e, disp(e.message); end; exit();"
os.system('cd %s && matlab %s -r "%s"' % (exportDir, matlabOpts, matlabCmd))
shutil.copy('%s/imos-toolbox.zip' % exportDir, './%s' % stdArchive)

try:
  googleSubmit(srcArchive, srcSummary)
  googleSubmit(stdArchive, stdSummary)

except:
  if os.path.exists(compilerLog):
    attachment = compilerLog
  else:
    attachment = None
  
  gmail.send(
    "guillaume.galibert@utas.edu.au",
    "[imos-toolbox] Snapshot upload error",
    "Check the snapshot script. Fix, then delete previous files before runnning new snapshot.",
    attachment,
    "my_gmail_login",
    "my_gmail_password")

print('\n--removing local SVN tree and archives')
shutil.rmtree('%s' % exportDir)
os.remove(srcArchive)
os.remove(stdArchive)
}}}

The `gmail` module, which sends me an email if compilation fails:
{{{
#!/usr/bin/python
#
# Thank you, http://kutuma.blogspot.com/2007/08/sending-emails-via-gmail-with-python.html
#

import smtplib
from email.MIMEMultipart import MIMEMultipart
from email.MIMEBase import MIMEBase
from email.MIMEText import MIMEText
from email import Encoders
import os

def send(to, subject, text, attach, user, pwd):

  msg = MIMEMultipart()

  msg['From']    = user
  msg['To']      = to
  msg['Subject'] = subject

  msg.attach(MIMEText(text))

  if attach is not None:
    part = MIMEBase('application', 'octet-stream')
    part.set_payload(open(attach, 'rb').read())
    Encoders.encode_base64(part)
    part.add_header('Content-Disposition',
      'attachment; filename="%s"' % os.path.basename(attach))
    msg.attach(part)

  mailServer = smtplib.SMTP("smtp.gmail.com", 587)
  mailServer.ehlo()
  mailServer.starttls()
  mailServer.ehlo()
  mailServer.login(user, pwd)
  mailServer.sendmail(user, to, msg.as_string())
  mailServer.close()
}}}

The `ziputil` module, which enables me creating zip files:
{{{
#!/usr/bin/python

import os
import zipfile

def zipdir(dirPath=None, zipFilePath=None, includeDirInZip=True):

	if not zipFilePath:
		zipFilePath = dirPath + ".zip"
	if not os.path.isdir(dirPath):
		raise OSError("dirPath argument must point to a directory. "
			"'%s' does not." % dirPath)
	parentDir, dirToZip = os.path.split(dirPath)
	#Little nested function to prepare the proper archive path
	def trimPath(path):
		archivePath = path.replace(parentDir, "", 1)
		if parentDir:
			archivePath = archivePath.replace(os.path.sep, "", 1)
		if not includeDirInZip:
			archivePath = archivePath.replace(dirToZip + os.path.sep, "", 1)
		return os.path.normcase(archivePath)

	outFile = zipfile.ZipFile(zipFilePath, "w",
		compression=zipfile.ZIP_DEFLATED)
	for (archiveDirPath, dirNames, fileNames) in os.walk(dirPath):
		for fileName in fileNames:
			filePath = os.path.join(archiveDirPath, fileName)
			outFile.write(filePath, trimPath(filePath))
		#Make sure we get empty directories as well
		if not fileNames and not dirNames:
			zipInfo = zipfile.ZipInfo(trimPath(archiveDirPath) + "/")
			#some web sites suggest doing
			#zipInfo.external_attr = 16
			#or
			#zipInfo.external_attr = 48
			#Here to allow for inserting an empty directory.  Still TBD/TODO.
			outFile.writestr(zipInfo, "")
	outFile.close()
}}}