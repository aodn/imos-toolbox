#summary Weekly SVN snapshot
#labels Support

<wiki:toc/>

= Weekly SVN Snapshot =

Weekly snapshot of the Toolbox codebase is available from the [http://code.google.com/p/imos-toolbox/downloads/list downloads] page. A snapshot is created every Monday at 13:00 (AEST).

 * *Snapshot*: Contains a compiled version of the source code and the source code straight from the SVN.

Compilation of the snapshot requires use of the Matlab Compiler, which is on a shared license. This means that if someone else is using the compiler when the snapshot script runs, the script will fail, and the snapshot will not be uploaded. When this happens, I will attempt to compile a standalone snapshot as soon as possible.

== File format and contents ==

The snapshot is a zip file which contains the contents of the SVN `trunk` directory, minus the `Tests/sample_data` directory. 

The Java files are automatically compiled when the snapshot file is created, so there is no need to do any compilation. 

The Java code is compiled with the Sun Java Development Kit, version 1.6.0_25.

The matlab code is compiled with the Matlab Compiler, version 4.14 (R 2010b) since imos-toolbox versions strictly above 1.5.5.

== Submission script ==

The snapshot is created on a Windows XP platform. Snapshot creation is triggered by a weekly cronjob, which executes the simple snapshot.bat script below :

{{{
python snapshot.py
pause
}}} 

The snapshot.py python script exports the SVN trunk, compiles the Java and then Matlab files, creates the snapshot, and finally calls another python script which uploads it to the project website. This [http://code.google.com/p/support/wiki/ScriptedUploads upload script] is conveniently provided by Google Code.

{{{
#!/usr/bin/python

import os
import sys
import time
import shutil
import ziputil
import gmail

# snapshot.py
# Exports the IMOS Toolbox from SVN and
#
#   - Creates an archive of the source 
#   - Runs Util/imosCompile.m to create a standalone executable archive
# 
# Both of these files are submitted back to the project as file downloads.
#
# svn, javac, ant and matlab must be on PATH
# JAVA_HOME must be set
#

lt = time.localtime()
at = time.asctime()

project = 'imos-toolbox'

def googleSubmit(archive, summary):

  username = 'guillaume.galibert@gmail.com'
  password = 'dZ2JH2wD4ad2' # SVN password!!!
  labels   = 'Type-Snapshot'

  print('\n--submitting %s to google' % archive)
  cmd = 'python googlecode_upload.py'
  cmd = ' %s -s "%s"' % (cmd,summary)
  cmd = ' %s -p %s'   % (cmd,project)
  cmd = ' %s -u %s'   % (cmd,username)
  cmd = ' %s -w %s'   % (cmd,password)
  cmd = ' %s -l "%s"' % (cmd,labels)
  cmd = ' %s %s'      % (cmd,archive)
  
  os.system(cmd)

url        = 'http://%s.googlecode.com/svn/trunk' % project
exportDir  = 'export'
stdArchive = '%04i-%02i-%02i_unstable_snapshot.zip' % (lt[0], lt[1], lt[2])

stdSummary  = 'IMOS Toolbox SVN unstable snapshot from %s for test purpose only' % at 
compilerLog = '.\%s\log.txt' % exportDir

#
# export from SVN
#
print('\n--exporting tree from %s to %s' % (url, exportDir))
os.system('svn export %s %s' % (url, exportDir))

#
# remove Tests directory
#
print('\n--removing tests')
shutil.rmtree('%s/Tests' % exportDir)

#
# build DDB interface
#
print('\n--building DDB interface')
compiled = os.system('cd %s/Java && ant install' % exportDir)

if compiled is not 0:
  print('\n--DDB interface compilation failed - cleaning')
  os.system('cd %s/Java && ant clean' % exportDir)
  gmail.send(
    "guillaume.galibert@utas.edu.au",
    "[imos-toolbox] DDB interface compilation error",
    "Check the Java DDB interface code",
    None,
    "guillaume.galibert",
    "28gg=!bb")

#
# create snapshot
#
print('\n--creating snapshot')
matlabOpts = '-wait -nosplash -nodesktop -logfile "%s"' % compilerLog
matlabCmd = "addpath('Util'); try, imosCompile(); catch e, disp(e.message); end; exit();"
os.system('cd %s && matlab %s -r "%s"' % (exportDir, matlabOpts, matlabCmd))
shutil.copy('%s/imos-toolbox.zip' % exportDir, './%s' % stdArchive)

try:
  googleSubmit(stdArchive, stdSummary)

except:
  if os.path.exists(compilerLog):
    attachment = compilerLog
  else:
    attachment = None
  
  gmail.send(
    "guillaume.galibert@utas.edu.au",
    "[imos-toolbox] Snapshot upload error",
    "Check the snapshot script. Fix, then delete previous files before runnning new snapshot.",
    attachment,
    "guillaume.galibert",
    "28gg=!bb")

print('\n--removing local SVN tree and archives')
shutil.rmtree('%s' % exportDir)
os.remove(stdArchive)
}}}

The `gmail` module, which sends me an email if compilation fails:
{{{
#!/usr/bin/python
#
# Thank you, http://kutuma.blogspot.com/2007/08/sending-emails-via-gmail-with-python.html
#

import smtplib
from email.MIMEMultipart import MIMEMultipart
from email.MIMEBase import MIMEBase
from email.MIMEText import MIMEText
from email import Encoders
import os

def send(to, subject, text, attach, user, pwd):

  msg = MIMEMultipart()

  msg['From']    = user
  msg['To']      = to
  msg['Subject'] = subject

  msg.attach(MIMEText(text))

  if attach is not None:
    part = MIMEBase('application', 'octet-stream')
    part.set_payload(open(attach, 'rb').read())
    Encoders.encode_base64(part)
    part.add_header('Content-Disposition',
      'attachment; filename="%s"' % os.path.basename(attach))
    msg.attach(part)

  mailServer = smtplib.SMTP("smtp.gmail.com", 587)
  mailServer.ehlo()
  mailServer.starttls()
  mailServer.ehlo()
  mailServer.login(user, pwd)
  mailServer.sendmail(user, to, msg.as_string())
  mailServer.close()
}}}