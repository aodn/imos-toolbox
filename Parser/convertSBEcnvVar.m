function [name, data, comment] = convertSBEcnvVar(name, data, timeOffset, instHeader, procHeader, mode)
%CONVERTSBECNVVAR Processes data from a SeaBird .cnv file.
%
% This function is able to convert data retrieved from a CNV SeaBird 
% data file generated by the Seabird SBE Data Processing program. This
% function is called from the different readSBE* functions.
%
% Inputs:
%   name        - SeaBird parameter name.
%   data        - data in SeaBird file.
%   timeOffset  - offset to be applied to time value in SeaBird file.
%   instHeader  - Struct containing instrument header.
%   procHeader  - Struct containing processed header.
%   mode        - Toolbox data type mode ('profile' or 'timeSeries').
%
% Outputs:
%   name       - IMOS parameter code.
%   data       - data converted to fit IMOS parameter unit.
%   comment    - any comment on the parameter.
%
% Author:       Guillaume Galibert <guillaume.galibert@utas.edu.au>
%

%
% Copyright (c) 2009, eMarine Information Infrastructure (eMII) and Integrated 
% Marine Observing System (IMOS).
% All rights reserved.
% 
% Redistribution and use in source and binary forms, with or without 
% modification, are permitted provided that the following conditions are met:
% 
%     * Redistributions of source code must retain the above copyright notice, 
%       this list of conditions and the following disclaimer.
%     * Redistributions in binary form must reproduce the above copyright 
%       notice, this list of conditions and the following disclaimer in the 
%       documentation and/or other materials provided with the distribution.
%     * Neither the name of the eMII/IMOS nor the names of its contributors 
%       may be used to endorse or promote products derived from this software 
%       without specific prior written permission.
% 
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
% POSSIBILITY OF SUCH DAMAGE.
%
narginchk(6, 6);

switch name
    
    % elapsed time (seconds since start)
    case 'timeS'
      name = 'TIME';
      data = data / 86400 + timeOffset;
      comment = '';
      
    % elapsed time (minutes since start)
    case 'timeM'
      name = 'TIME';
      data = data / 1440 + timeOffset;
      comment = '';
      
    % elapsed time (hours since start)
    case 'timeH'
      name = 'TIME';
      data = data / 24  + timeOffset;
      comment = '';
    
    % elapsed time (days since start of year)
    case 'timeJ'
      name = 'TIME';
      if timeOffset == 0; timeOffset = 2010; end % clumsy, may need fixing!
      startYear = str2double(datestr(timeOffset, 'yyyy'));
      %data = rem(data, floor(data)) + floor(timeOffset);
      data = data + datenum(startYear-1,12,31);
      comment = '';
    
    % elapsed time (seconds since 01-Jan-2000)
    case 'timeK'
        name = 'TIME';
        data = data / 86400 + datenum(2000,1,1,0,0,0);
        comment = '';
        
    % elapsed time (seconds since 1970-01-01)
    case 'timeY'
      name = 'TIME';
      data = data / 86400 + datenum(1970,1,1,0,0,0);
      comment = '';
        
    % strain gauge pressure (dbar)
    case {'pr', 'prM', 'prdM'}
      name = 'PRES_REL';
      comment = '';
      
    % strain gauge pressure (psi)
    % 1 psi = 0.68948 dBar
    % 1 dbar = 1.45038 psi
    case 'prdE'
        name = 'PRES_REL';
        data = data .* 0.68948;
        comment = '';
      
    % temperature (deg C)
    case {'t090C', 'tv290C', 't090'}
      name = 'TEMP';
      comment = '';
      
    % conductivity (S/m)
    case {'c0S0x2Fm', 'cond0S0x2Fm'}
      name = 'CNDC';
      comment = '';
    
    % conductivity (mS/cm)
    % mS/cm -> 10-1 * S/m
    case {'c0ms0x2Fcm', 'cond0ms0x2Fcm', 'c0mS0x2Fcm', 'cond0mS0x2Fcm'}
      name = 'CNDC';
      data = data ./ 10;
      comment = '';
    
    % conductivity (uS/cm)
    % uS/cm -> 10-4 S/m
    case {'c0us0x2Fcm', 'cond0us0x2Fcm', 'c0uS0x2Fcm', 'cond0uS0x2Fcm'}
      name = 'CNDC';
      data = data ./ 10000;
      comment = '';
    
    % fluorescence (ug/l)
    case 'flC'
      name = 'CPHL';
      comment = 'Artificial chlorophyll data computed from bio-optical sensor raw counts measurements. Originally expressed in ug/l, 1l = 0.001m3 was assumed.';
      
    % artificial chlorophyll from fluorescence (mg/m3)
    case 'flECO0x2DAFL'
      name = 'CPHL';
      comment = 'Artificial chlorophyll data computed from bio-optical sensor raw counts measurements.';
      
    % oxygen (mg/l)
    % mg/l => umol/l
    case {'oxsolMg0x2FL', 'oxsatMg0x2FL', 'sbeox0Mg0x2FL'}
      name = 'DOX1';
      data = data .* 44.660/1.429; % O2 density = 1.429kg/m3
      comment = 'Originally expressed in mg/l, O2 density = 1.429kg/m3 and 1ml/l = 44.660umol/l were assumed.';
      
    % oxygen (ml/l)
    % ml/l => umol/l
    case 'sbeox0ML0x2FL'
      name = 'DOX1';
      data = data .* 44.660;
      comment = 'Originally expressed in ml/l, 1ml/l = 44.660umol/l was assumed.';
    
    % oxygen (umol/Kg)
    % umol/Kg
    case {'oxsolMm0x2FKg', 'oxsatMm0x2FKg', 'sbeox0Mm0x2FKg', 'sbeopoxMm0x2FKg'}
      name = 'DOX2';
      comment = '';
    
    % Oxygen, SBE 63 [% saturation]
    case 'sbeopoxPS'
        name = 'DOXS';
        comment = '';
       
    % Oxygen Temperature, SBE 63 [ITS-90, deg C]
    case 'sbeoxTC'
        name = 'DOXY_TEMP';
        comment = '';
      
    % salinity (PSU)
    case 'sal00'
      name = 'PSAL';
      comment = '';
    
    % PAR/Irradiance, Biospherical/Licor
    case 'par'
      name = 'PAR';
      comment = '';
      
    % CPAR/Corrected Irradiance [%]
    case 'cpar'
      name = 'CPAR';
      comment = '';
      
    % Beam Attenuation, Chelsea/Seatech [1/m]
    case 'bat'
      name = 'BAT';
      comment = '';
      
    % turbidity (NTU)
    case {'obs', 'obs30x2B', 'turbWETntu0', 'upoly0'}
      name = 'TURB';
      comment = '';
      
    % descent rate m/s
    case 'dz0x2FdtM'
      name = 'DESC';
      comment = '';
          
    % density (kg/m3)
    case 'density00'
      name = 'DENS';
      comment = '';
    
    % depth (m)
    case {'depSM', 'depFM'}
      name = 'DEPTH';
      comment = '';
    
    % A/D counts to volts (sensor_analog_output 0 to 7)
    case {'v0', 'v1', 'v2', 'v3', 'v4', 'v5', 'v6', 'v7'}
      origName = name;
      name = ['volt_', getVoltageName(origName, instHeader)];
      comment = getVoltageComment(origName, procHeader);
      
    case 'f1'
        if strcmpi(mode, 'profile')
            name = 'CNDC_FREQ';
            comment = 'Conductivity Frequency in Hz (added for minCondFreq detection)';
        else
            name = '';
            data = [];
            comment = '';
        end
        
    case 'flag'
        if strcmpi(mode, 'profile')
            name = 'SBE_FLAG';
            comment = 'SBE Processing Flag (added for binning). 0 is good, anything else bad.';
        else
            name = '';
            data = [];
            comment = '';
        end
        
    case 'scan'
        if strcmpi(mode, 'profile')
            name = 'ETIME';
            data = data/4;
            comment = 'Elapsed time in seconds (basically number of scan divided by 4Hz, added for surface soak)';
        else
            name = '';
            data = [];
            comment = '';
        end
        
    otherwise 
      name = '';
      data = [];
      comment = '';
end

end

function comment = getVoltageComment(name, header)

comment = '';
switch name
    case 'v0'
        if isfield(header, 'volt0Expr'), comment = header.volt0Expr; end
    case 'v1'
        if isfield(header, 'volt1Expr'), comment = header.volt1Expr; end
    case 'v2'
        if isfield(header, 'volt2Expr'), comment = header.volt2Expr; end
	case 'v3'
        if isfield(header, 'volt3Expr'), comment = header.volt3Expr; end
    case 'v4'
        if isfield(header, 'volt4Expr'), comment = header.volt4Expr; end
    case 'v5'
        if isfield(header, 'volt5Expr'), comment = header.volt5Expr; end
	case 'v6'
        if isfield(header, 'volt6Expr'), comment = header.volt6Expr; end
    case 'v7'
        if isfield(header, 'volt7Expr'), comment = header.volt7Expr; end
end

end

function name = getVoltageName(origName, header)

name = '';
switch origName
    case 'v0'
        if isfield(header, 'sensorIds') && isfield(header, 'sensorTypes')
            name = header.sensorTypes{strcmpi(header.sensorIds, 'volt 0')};
        end
    case 'v1'
        if isfield(header, 'sensorIds') && isfield(header, 'sensorTypes')
            name = header.sensorTypes{strcmpi(header.sensorIds, 'volt 1')};
        end
    case 'v2'
        if isfield(header, 'sensorIds') && isfield(header, 'sensorTypes')
            name = header.sensorTypes{strcmpi(header.sensorIds, 'volt 2')};
        end
	case 'v3'
        if isfield(header, 'sensorIds') && isfield(header, 'sensorTypes')
            name = header.sensorTypes{strcmpi(header.sensorIds, 'volt 3')};
        end
    case 'v4'
        if isfield(header, 'sensorIds') && isfield(header, 'sensorTypes')
            name = header.sensorTypes{strcmpi(header.sensorIds, 'volt 4')};
        end
    case 'v5'
        if isfield(header, 'sensorIds') && isfield(header, 'sensorTypes')
            name = header.sensorTypes{strcmpi(header.sensorIds, 'volt 5')};
        end
	case 'v6'
        if isfield(header, 'sensorIds') && isfield(header, 'sensorTypes')
            name = header.sensorTypes{strcmpi(header.sensorIds, 'volt 6')};
        end
    case 'v7'
        if isfield(header, 'sensorIds') && isfield(header, 'sensorTypes')
            name = header.sensorTypes{strcmpi(header.sensorIds, 'volt 7')};
        end
end

end