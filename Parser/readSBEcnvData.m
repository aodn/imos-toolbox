function [data, comment] = readSBEcnvData( dataLines, instHeader, procHeader, mode )
%READSBECNVDATA Processes data lines from an SBE cnv file.
%
% This function is able to process data retrieved from a converted (.cnv)
% data file generated by the Seabird SBE Data Processing program.
%
% Inputs:
%   dataLines  - Cell array of strings, the data lines in the original file.
%   instHeader - Struct containing instrument header.
%   procHeader - Struct containing processed header.
%   mode       - Toolbox data type mode.
%
% Outputs:
%   data       - Struct containing variable data.
%   comment    - Struct containing variable comment.
%
% Author:       Paul McCarthy <paul.mccarthy@csiro.au>
% Contributor:  Guillaume Galibert <guillaume.galibert@utas.edu.au>
%

%
% Copyright (C) 2017, Australian Ocean Data Network (AODN) and Integrated
% Marine Observing System (IMOS).
%
% This program is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation version 3 of the License.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
% GNU General Public License for more details.

% You should have received a copy of the GNU General Public License
% along with this program.
% If not, see <https://www.gnu.org/licenses/gpl-3.0.en.html>.
%
  narginchk(4, 4);

  data = struct;
  comment = struct;

  columns = procHeader.columns;

  format = '%n';
  format = repmat(format, [1, length(columns)]);

  % join cell array into one long line for fast textscan read
  dataLines = strjoin(dataLines, ' ');
  dataLines = textscan(dataLines, format);


  % the cast date, if present, is used for time field offset
  if isfield(instHeader, 'castDate')
    castDate = instHeader.castDate;
  else
      if isfield(procHeader,'startTime')
        castDate = procHeader.startTime;
      else
        castDate = 0;
      end
  end

  for k = 1:length(columns)

    d = dataLines{k};

    % any flagged bad data is set to NaN (even flag value itself)
    d(d == procHeader.badFlag) = nan;

    [n, d, c] = convertSBEcnvVar(genvarname(columns{k}), d, castDate, instHeader, procHeader, mode);

    if isempty(n) || isempty(d), continue; end

    count = 0;
    nn = n;
    switch mode
        case 'profile'
            % if the same parameter appears multiple times,
            % we deliberately overwrite it assuming the last version is the
            % most relevant

        case 'timeSeries'
            % if the same parameter appears multiple times,
            % don't overwrite it in the data struct - append
            % a number to the end of the variable name, as
            % per the IMOS convention
            while isfield(data, nn)
                count = count + 1;
                nn = [n '_' num2str(count)];
            end

    end

    data.(nn) = d;
    comment.(nn) = c;
  end

end
