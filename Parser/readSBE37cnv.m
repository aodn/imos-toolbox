function [data, comment] = readSBE37cnv( dataLines, instHeader, procHeader, mode )
%READSBE37CNV Processes data from a Seabird .cnv file.
%
% This function is able to process data retrieved from a converted (.cnv) 
% data file generated by the Seabird SBE Data Processing program. This
% function is called from SBE37SMParse.
%
% Inputs:
%   dataLines  - Cell array of strings, the data lines in the original file.
%   instHeader - Struct containing instrument header.
%   procHeader - Struct containing processed header.
%   mode       - Toolbox data type mode.
%
% Outputs:
%   data       - Struct containing variable data.
%   comment    - Struct containing variable comment.
%
% Author: 		Paul McCarthy <paul.mccarthy@csiro.au>
% Contributor: 	Brad Morris <b.morris@unsw.edu.au>
% 				Guillaume Galibert <guillaume.galibert@utas.edu.au>

%
% Copyright (c) 2016, Australian Ocean Data Network (AODN) and Integrated 
% Marine Observing System (IMOS).
% All rights reserved.
% 
% Redistribution and use in source and binary forms, with or without 
% modification, are permitted provided that the following conditions are met:
% 
%     * Redistributions of source code must retain the above copyright notice, 
%       this list of conditions and the following disclaimer.
%     * Redistributions in binary form must reproduce the above copyright 
%       notice, this list of conditions and the following disclaimer in the 
%       documentation and/or other materials provided with the distribution.
%     * Neither the name of the AODN/IMOS nor the names of its contributors 
%       may be used to endorse or promote products derived from this software 
%       without specific prior written permission.
% 
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
% POSSIBILITY OF SUCH DAMAGE.
%
  narginchk(4,4);
  
  data = struct;
  comment = struct;
  
  columns = procHeader.columns;
  
  format = '%n';
  format = repmat(format, [1, length(columns)]);
  
  dataLines = [dataLines{:}];
  dataLines = textscan(dataLines, format);
  
  for k = 1:length(columns)
    
    d = dataLines{k};
    d(d == procHeader.badFlag) = nan;
    
    [n, d, c] = convertData(genvarname(columns{k}), d, instHeader, procHeader, mode);
    
    if isempty(n) || isempty(d), continue; end
    
    % if the same parameter appears multiple times, 
    % don't overwrite it in the data struct - append
    % a number to the end of the variable name, as 
    % per the IMOS convention
    count = 0;
    nn = n;
    while isfield(data, nn)
      
      count = count + 1;
      nn = [n '_' num2str(count)];
    end
    
    data.(nn) = d; 
    comment.(nn) = c;
  end
  
end

function [name, data, comment] = convertData(name, data, instHeader, procHeader, mode)
%CONVERTDATA The .cnv file provides data in a bunch of different units of
% measurement. This function is just a big switch statement which takes
% SBE17SM data as input, and attempts to convert it to IMOS compliant name and
% unit of measurement. Returns empty string/vector if the parameter is not
% supported.
%
%BDM (18/02/2011) - Modified to suit SBE37SM - i.e. ORS065

%This is not used for SBE37SM
% the cast date, if present, is used for time field offset
castDate = 0;
if isfield(procHeader, 'startTime'); castDate = procHeader.startTime; end

[name, data, comment] = convertSBEcnvVar(name, data, castDate, instHeader, procHeader, mode);

end
