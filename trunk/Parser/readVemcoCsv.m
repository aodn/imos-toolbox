function [data, comment] = readVemcoCsv(dataLines, procHeader)
%readVemcoCsv Processes data section from a Vemco .csv file.
%
% This function is able to process data retrieved from a converted (.csv)
% data file generated by the Vemco Vue Logger program. This
% function is called from VemcoParse. Code modelled on readSBE37cnv.m
%
% Inputs:
%   dataLines - cell array of columns of raw data.
%   procHeader - Struct containing processed header.
%
% Outputs:
%   data       - Struct containing variable data.
%   comment    - Struct containing variable comment.
%
% Author: 		Simon Spagnol <s.spagnol@aims.gov.au>
% Contributor: 	Guillaume Galibert <guillaume.galibert@utas.edu.au>

%
% Copyright (c) 2009, eMarine Information Infrastructure (eMII) and Integrated
% Marine Observing System (IMOS).
% All rights reserved.
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
%
%     * Redistributions of source code must retain the above copyright notice,
%       this list of conditions and the following disclaimer.
%     * Redistributions in binary form must reproduce the above copyright
%       notice, this list of conditions and the following disclaimer in the
%       documentation and/or other materials provided with the distribution.
%     * Neither the name of the eMII/IMOS nor the names of its contributors
%       may be used to endorse or promote products derived from this software
%       without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
% POSSIBILITY OF SUCH DAMAGE.
%
error(nargchk(2,2,nargin));

data = struct;
comment = struct;

columns = procHeader.columns;
% assume date and time would always be the first and second column
iDate=1;
iTime=2;
iDateTimeCol=[iDate iTime];
iProcCol=setdiff([1:length(columns)],iDateTimeCol);

% I don't know how to handle seperate date/time column in loop nicely
% so pull out datetime and set here, and process the other columns in the
% loop.
data.TIME = datenum(strcat(dataLines{iDate},'T',dataLines{iTime}),'yyyy-mm-ddTHH:MM:SS');
comment.TIME = 'TIME';

for kk = 1:length(iProcCol)
    iCol=iProcCol(kk);
    
    d = dataLines{iCol};
    
    [n, d, c] = convertData(genvarname(columns{iCol}), d, procHeader);
    
    if isempty(n) || isempty(d), continue; end
    
    % if the same parameter appears multiple times,
    % don't overwrite it in the data struct - append
    % a number to the end of the variable name, as
    % per the IMOS convention
    count = 0;
    nn = n;
    while isfield(data, nn)
        
        count = count + 1;
        nn = [n '_' num2str(count)];
    end
    
    data.(nn) = d;
    comment.(nn) = c;
end

end

function [name, data, comment] = convertData(name, data, procHeader)
%CONVERTDATA In order to future proof the .csv file, utilize the same ideal
% as for reading SBE37 data. This function is just a big switch statement which takes
% column header as input, and attempts to convert it to IMOS compliant name and
% unit of measurement. Returns empty string/vector if the parameter is not
% supported.

switch name
    
    %'Temperature (ï¿½C)'
    case 'Temperature0x280xFFFDC0x29';
        name = 'TEMP';
        comment = '';
        
    otherwise
        name = '';
        data = [];
        comment = '';
end
end
